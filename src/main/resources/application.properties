spring.application.name=otc-backend

server.port=8000

#for running in docker container

#spring.datasource.url=jdbc:postgresql://host.docker.internal:5433/otcDb?user=${POSTGRES_USER}&password=Mypassword1234
#spring.datasource.url=jdbc:postgresql://host.docker.internal:5433/otcDb?user=postgres&password=Mypassword1234
#spring.datasource.url=jdbc:postgresql://db:5432/otcDb?user=postgres&password=Mypassword1234

#spring.datasource.url=jdbc:postgresql://localhost:5433/otcDb?user=postgres&password=Mypassword1234

#spring.datasource.url=jdbc:postgresql://localhost:5432/otcDb?user=postgres&password=Mypassword1234


spring.datasource.url=jdbc:postgresql://host.docker.internal:5433/otcDb
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#spring.datasource.url=jdbc:postgresql://db:5432/otcDb
#spring.datasource.username=${POSTGRES_USER}
#spring.datasource.password=${POSTGRES_PASSWORD}
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=create

spring.jpa.hibernate.ddl-auto=create


spring.data.elasticsearch.cluster-name=docker-cluster
spring.data.elasticsearch.cluster-node=localhost:9200

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

rabbitmq.queue.name=otc_queue
rabbitmq.queue.json.name=otc_json_queue
rabbitmq.exchange.name=otc_exchange
rabbitmq.routing.key=otc_routing_key
rabbitmq.routing.json.key=otc_routing_json_key
rabbitmq.exchange.user.name=otc_exchange_user

management.endpoints.web.exposure.include=*

management.endpoint.health.show-details=always

info.app.name= Optical Telephone Company